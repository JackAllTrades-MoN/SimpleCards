{"version":3,"sources":["App.tsx","api.ts","reportWebVitals.ts","index.tsx"],"names":["KEY_LOCAL_STORAGE","WordCard","props","descr","word","description","map","entry","meanings","meaning","partOfSpeech","definitions","ddef","definition","example","Tooltip","title","Card","sx","display","justifyContent","Box","CardContent","Typography","name","cnt","backgroundColor","IconButton","onClick","deleteEntry","WordInput","useState","value","setValue","TextField","className","onChange","e","target","onKeyDown","key","setWord","variant","label","withStyles","app","textAlign","width","color","fontSize","letterSpacing","textShadow","classes","words","setWords","open","message","snState","setSnState","filter","w","useEffect","saved","localStorage","getItem","JSON","parse","setItem","stringify","AppBar","position","Toolbar","size","edge","mr","noWrap","component","xs","sm","some","fetch","then","r","json","data","status","result","concat","error","Snackbar","anchorOrigin","vertical","horizontal","onClose","Alert","severity","Grid","container","spacing","item","marginTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1537fd07.chunk.js","sourcesContent":["import React, {useEffect, useState } from 'react';\nimport Grid from '@mui/material/Grid';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport Tooltip from '@mui/material/Tooltip';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Box from '@mui/material/Box';\nimport AppBar from '@mui/material/AppBar';\nimport withStyles, {WithStylesProps} from 'react-jss';\nimport { DictEntry, searchDict } from './api';\nimport { Toolbar } from '@mui/material';\n\nconst KEY_LOCAL_STORAGE='cards.words';\n\nconst styles = {\n  app: {\n//    height: \"100vh\",\n//    'background-color': '#343434',\n//    padding: \"0px\",\n    \"& .logo-text\": {\n      'font-family': \"'Baloo Tamma', cursive\",\n      textAlign: 'center',\n      width: '100%',\n      color: 'white',\n      fontSize: '30px',\n      letterSpacing: '2px',\n      textShadow: `-1px -1px 0px blue, 3px 3px 0px blue, 6px 6px 0px blue`,\n    },\n    \"& .word-input\": {\n//      width: '100%',\n    }\n  },\n};\n\ninterface Word {\n  name: string,\n  description?: DictEntry[],\n  cnt: number\n}\n\ninterface WordInputProps {\n  setWord: (word: string) => void,\n}\n\ninterface WordCardProps {\n  word: Word,\n  deleteEntry: (name: string) => void,\n}\n\nconst WordCard = (props: WordCardProps) => {\n  const descr = props.word.description?.map(\n    entry => <div>\n      {entry.meanings.map(meaning => <div>\n        {`(${meaning.partOfSpeech})`}<br />\n        {meaning.definitions.map(ddef => <div>\n          {`- ${ddef.definition}`}<br />\n          {`e.g., ${ddef.example}`}\n        </div>)}\n      </div>)}\n    </div>\n  );\n  return (\n    <Tooltip title={ descr || 'NotFound' }>\n      <Card sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n        <Box>\n          <CardContent>\n            <Typography>\n              { `${props.word.name} (${props.word.cnt})` }\n            </Typography>\n          </CardContent>          \n        </Box>\n        <Box sx={{ backgroundColor: '#f8d7d9' }}>\n          <CardContent>\n            <IconButton\n              onClick={() => props.deleteEntry(props.word.name)} >\n              <HighlightOffIcon />\n            </IconButton>\n          </CardContent>\n        </Box>\n      </Card>\n    </Tooltip>\n  );\n}\n\nconst WordInput = (props: WordInputProps) => {\n  const [value, setValue] = useState<string>('');\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  }\n  const onKeyDown = (e: React.KeyboardEvent) => {\n    if(e.key === 'Enter') {\n      props.setWord(value);\n      setValue('');\n    }\n  }\n  return (\n    <TextField\n      className=\"word-input\"\n      onChange={handleChange}\n      onKeyDown={onKeyDown}\n      value={value}\n      variant=\"outlined\"\n      label=\"enter your word\" />\n  );\n}\n\ninterface SnackBarState {\n  open: boolean,\n  message: string,\n}\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  children?: React.ReactNode\n}\n\nfunction App(props: IProps) {\n  const { classes } = props;\n  const [words, setWords] = useState<Word[]>([]);\n  const [snState, setSnState] = useState<SnackBarState>({\n    open: false,\n    message: '',\n  });\n  const { open, message } = snState;\n\n  const handleClose = () => {\n    setSnState({ ...snState, open: false });\n  }\n\n  const deleteEntry = (name: string) => {\n    setWords(words.filter((w) => name !== w.name));\n  }\n\n  useEffect(() => {\n    const saved = localStorage.getItem(KEY_LOCAL_STORAGE);\n    if(saved) {\n      setWords(JSON.parse(saved))\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\n      KEY_LOCAL_STORAGE, JSON.stringify(words));\n  }, [words]);\n\n  const addEntry = (name: string) => {\n    if (words.some(w => w.name === name)) {\n      setWords(words.map(w => (w.name === name)?({ ...w, cnt: w.cnt+1 }):w));\n    } else {\n      searchDict(name)\n      .then((result) => {\n        if (result.status === 200) {\n          setWords(words.concat({\n            name: name,\n            description: result.data,\n            cnt: 0\n          }));\n        } else {\n          setWords(words.concat({name: name, cnt: 0}));\n        }\n      },\n      (error) => {\n        setSnState({open: true, message: 'APIRequestFailed'});\n      });\n    }\n  };\n\n  return (\n    <div className={classes.app}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            size='large'\n            edge='start'\n            color='inherit'\n            sx={{ mr: 2}}>\n            <MenuIcon />\n          </IconButton>\n        </Toolbar>\n        <Typography\n          variant=\"h6\"\n          noWrap\n          component=\"div\"\n          sx={{ display: { xs: 'none', sm: 'block' } }}\n        >\n          SimpleCards\n        </Typography>\n        <WordInput setWord={addEntry} />\n      </AppBar>\n      <Snackbar\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n        open={open}\n        onClose={handleClose}>\n          <Alert variant=\"filled\" severity=\"error\">\n            {message}\n          </Alert>\n      </Snackbar>\n      <Grid container spacing={2}>\n        <Grid item xs={3}>\n        </Grid>\n        <Grid item xs={9} sx={{marginTop: '25px'}}>\n          <Grid container spacing={2}>\n            {words.map((word) => {\n              return (\n                <Grid item xs={3}>\n                  <WordCard\n                    word={word}\n                    deleteEntry={deleteEntry}\n                  />\n                </Grid>\n              );\n            })}\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(App);\n","\nexport interface DictEntry {\n    meanings: DictMeaning[]\n}\n\nexport interface DictMeaning {\n    partOfSpeech: string,\n    definitions: DictDefinition[]\n}\n\nexport interface DictDefinition {\n    definition: string,\n    example: string,\n}\n\nexport const searchDict = (word: string) => \n    fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`)\n    .then(r => r.json().then((data: DictEntry[]) => ({status: r.status, data: data})));","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}