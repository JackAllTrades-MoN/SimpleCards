{"version":3,"sources":["app/hooks.ts","features/notification/notificationSlice.ts","features/wordlist/wordListSlice.ts","common/freedictapi.ts","features/WordInput.tsx","features/notification/Notification.tsx","features/wordlist/WordCard.tsx","features/UsageMessage.tsx","features/wordlist/WordList.tsx","App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","notificationSlice","createSlice","name","initialState","open","message","reducers","showError","_state","action","payload","close","state","actions","selectNotification","notification","wordListSlice","words","deleteWord","filter","w","insertWord","concat","countUp","map","cnt","setWords","state_","addWord","dispatch","getState","word","wordlist","some","fetch","then","r","json","data","status","result","id","reduce","a","b","Math","max","description","error","selectWordList","WordInput","props","useState","value","setValue","useEffect","isVisible","document","getElementById","focus","TextField","className","onChange","e","target","onKeyDown","key","onClick","stopPropagation","variant","label","Notification","Snackbar","anchorOrigin","vertical","horizontal","onClose","autoHideDuration","Alert","severity","WordCard","descr","entry","index","meanings","meaning","partOfSpeech","definitions","ddef","definition","example","Tooltip","title","Card","sx","display","justifyContent","Box","CardContent","Typography","backgroundColor","IconButton","deleteEntry","UsageMessage","KEY_LOCAL_STORAGE","WordList","saved","localStorage","getItem","JSON","parse","setItem","stringify","length","Grid","container","width","padding","spacing","item","xs","sm","withStyles","app","position","top","left","right","bottom","classes","windowHeight","setWindowHeight","inputRef","useRef","window","outerHeight","addEventListener","bdopen","setBdopen","openBackDrop","downloadJson","blob","Blob","type","link","createElement","URL","createObjectURL","href","download","body","appendChild","click","removeChild","readFileAsync","file","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsText","onFileInputChange","event","files","buff","console","log","tabIndex","style","height","Backdrop","activeElement","blur","Stack","direction","Fab","color","current","hidden","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","notificationReducer","wordlistReducer","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0242233c.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport type { RootState } from '../../app/store'\n\ninterface NotificationState {\n    open: boolean,\n    message: string,\n}\n\nconst initialState: NotificationState = {\n    open: false,\n    message: ''\n}\n\nexport const notificationSlice = createSlice({\n    name: 'notification',\n    initialState,\n    reducers: {\n        showError: (_state, action: PayloadAction<string>) => (\n            {open: true, message: action.payload}\n        ),\n        close: (state) => (\n            {...state, open:false}\n        )\n    }\n})\n\nexport const { showError, close } = notificationSlice.actions\n\nexport const selectNotification = (state: RootState) => state.notification\n\nexport default notificationSlice.reducer","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport type { RootState, AppThunk } from '../../app/store'\nimport { searchDict } from '../../common/freedictapi'\nimport { showError } from '../notification/notificationSlice'\nimport { Word } from '../../common/word'\n\ninterface WordListState {\n    words: Word[],\n}\n\nconst initialState: WordListState = {\n    words: []\n}\n\nexport const wordListSlice = createSlice({\n    name: 'wordlist',\n    initialState,\n    reducers: {\n        deleteWord: ({words}, action: PayloadAction<string>) => (\n            { words: words.filter((w) => action.payload !== w.name) }\n        ),\n        insertWord: ({words}, action: PayloadAction<Word>) => (\n            { words: words.concat(action.payload) }\n        ),\n        countUp: ({words}, action: PayloadAction<string>) => (\n            { words: words.map(w =>\n                (w.name === action.payload)?({ ...w, cnt: w.cnt+1 }):w)}\n        ),\n        setWords: (state_, action:PayloadAction<Word[]>) => (\n            { words: action.payload }\n        )\n    }\n})\n\nexport const { deleteWord, setWords } = wordListSlice.actions\n\nexport const addWord = (name: string): AppThunk =>\n    (dispatch, getState) => {\n        const {words} = getState().wordlist;\n        if(words.some(w => w.name === name)) {\n            dispatch(wordListSlice.actions.countUp(name))\n        } else {\n            searchDict(name)\n            .then((result) => {\n                if (result.status === 200) {\n                    dispatch(wordListSlice.actions.insertWord(\n                        {\n                            id: words.reduce((a, b) => Math.max(a, b.id), 0) + 1,\n                            name: name,\n                            description: result.data,\n                            cnt: 0\n                        }\n                    ))\n                } else {\n                    dispatch(wordListSlice.actions.insertWord(\n                        {\n                            id: words.reduce((a, b) => Math.max(a, b.id), 0) + 1,\n                            name: name,\n                            cnt: 0\n                        }\n                    ))\n                }\n            },\n            (error) => {\n                dispatch(showError('APIRequestFailed'))\n            })\n        }\n    }\n\nexport const selectWordList = (state: RootState) => state.wordlist.words\n\nexport default wordListSlice.reducer","\nexport interface DictEntry {\n    meanings: DictMeaning[]\n}\n\nexport interface DictMeaning {\n    partOfSpeech: string,\n    definitions: DictDefinition[]\n}\n\nexport interface DictDefinition {\n    definition: string,\n    example: string,\n}\n\nexport const searchDict = (word: string) => \n    fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`)\n    .then(r => r.json().then((data: DictEntry[]) => ({status: r.status, data: data})));","import React, { useEffect, useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { useAppDispatch } from '../app/hooks';\nimport { addWord } from './wordlist/wordListSlice';\n\ninterface WordInputProps {\n  isVisible: boolean,\n}\n  \nexport const WordInput = (props: WordInputProps) => {\n    const dispatch = useAppDispatch();\n    const [value, setValue] = useState<string>('');\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setValue(e.target.value);\n    };\n    const onKeyDown = (e: React.KeyboardEvent) => {\n      if(e.key === 'Enter') {\n        if(value !== '') {\n          dispatch(addWord(value));\n          setValue('');\n        }\n      }\n    };\n    const onClick = (e: React.MouseEvent) => {\n        e.stopPropagation();\n    };\n    useEffect(() => {\n      setValue('')\n      if(props.isVisible) {\n        document.getElementById(\"word-input\")?.focus()\n      }\n    }, [props.isVisible])\n    return (\n      <TextField\n        id=\"word-input\"\n        className=\"word-input\"\n        onChange={handleChange}\n        onKeyDown={onKeyDown}\n        onClick={onClick}\n        value={value}\n        variant=\"outlined\"\n        label=\"enter your word\" />\n    );\n};","import Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { close, selectNotification } from './notificationSlice';\n\nexport const Notification = () => {\n    const {open, message} = useAppSelector(selectNotification);\n    const dispatch = useAppDispatch();\n    const closeSnackBar = () => {\n      dispatch(close())\n    }\n    return (\n        <Snackbar\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n            open={open}\n            onClose={closeSnackBar}\n            autoHideDuration={5000}\n        >\n          <Alert variant=\"filled\" severity=\"error\">\n            {message}\n          </Alert>\n      </Snackbar>\n    );\n}","import Tooltip from '@mui/material/Tooltip';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport IconButton from '@mui/material/IconButton';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport { Word } from '../../common/word';\n\nexport interface WordCardProps {\n    word: Word,\n    deleteEntry: (name: string) => void,\n}\n\nexport const WordCard = (props: WordCardProps) => {\n    const descr = props.word.description?.map(\n      (entry, index) => <div>\n        {entry.meanings.map(meaning => <div key={index}>\n          {`(${meaning.partOfSpeech})`}<br />\n          {meaning.definitions.map(\n            (ddef, index) => (\n              <div key={index}>\n                {`- ${ddef.definition}`}<br />\n                {`e.g., ${ddef.example}`}\n              </div>))}\n        </div>)}\n      </div>\n    );\n    return (\n      <Tooltip title={ descr || 'NotFound' }>\n        <Card sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n          <Box>\n            <CardContent>\n              <Typography>\n                { `${props.word.name} (${props.word.cnt})` }\n              </Typography>\n            </CardContent>          \n          </Box>\n          <Box sx={{ backgroundColor: '#f8d7d9' }}>\n            <CardContent>\n              <IconButton\n                onClick={() => props.deleteEntry(props.word.name)} >\n                <HighlightOffIcon />\n              </IconButton>\n            </CardContent>\n          </Box>\n        </Card>\n      </Tooltip>\n    );\n  }","import Typography from '@mui/material/Typography';\n\nexport const UsageMessage = () => {\n    return (\n      <Typography>\n        Type any key or click the add button below to add new word.\n      </Typography>\n    );\n  }","import Grid from '@mui/material/Grid'\nimport { WordCard } from './WordCard'\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { deleteWord, selectWordList, setWords } from './wordListSlice';\nimport { useEffect } from 'react';\nimport { UsageMessage } from '../UsageMessage';\n\nconst KEY_LOCAL_STORAGE='cards.words';\n\nexport const WordList = () => {\n    const words = useAppSelector(selectWordList);\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n      const saved = localStorage.getItem(KEY_LOCAL_STORAGE);\n      if(saved) {\n        dispatch(setWords(JSON.parse(saved)))\n      }\n    }, [dispatch]);\n\n    useEffect(() => {\n      localStorage.setItem(\n        KEY_LOCAL_STORAGE, JSON.stringify(words));\n    }, [words]);\n\n    if (words.length === 0) {\n      return <UsageMessage />\n    } else {\n      return (\n        <Grid container sx={{width: \"100%\", padding: \"40px\"}} spacing={2}>\n        {words.map((word) => {\n          return (\n            <Grid item xs={12} sm={3} key={word.id}>\n              <WordCard\n                word={word}\n                deleteEntry={(name: string) => dispatch(deleteWord(name))}\n              />\n            </Grid>\n          );\n        })}\n      </Grid>)\n    }\n}","import React, { useEffect, useState, useRef } from 'react'\n\nimport Backdrop from '@mui/material/Backdrop'\nimport Fab from '@mui/material/Fab'\nimport DownloadIcon from '@mui/icons-material/Download'\nimport UploadIcon from '@mui/icons-material/Upload'\nimport AddIcon from '@mui/icons-material/Add'\nimport Stack from '@mui/material/Stack'\nimport withStyles, {WithStylesProps} from 'react-jss'\nimport { WordInput } from './features/WordInput'\nimport { Notification } from './features/notification/Notification'\nimport { WordList } from './features/wordlist/WordList'\nimport { useAppSelector, useAppDispatch } from './app/hooks'\nimport { selectWordList, setWords } from './features/wordlist/wordListSlice'\n\nconst styles = {\n  app: {\n    padding: \"20px\",\n    \"& .btns\": {\n      position: 'fixed',\n      top: 'auto',\n      left: 'auto',\n      right: '20px',\n      bottom: '20px'\n    },\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  children?: React.ReactNode\n}\n\nfunction App(props: IProps) {\n  const { classes } = props;\n  const [windowHeight, setWindowHeight] = useState<number>(0);\n  const words = useAppSelector(selectWordList);\n  const dispatch = useAppDispatch();\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setWindowHeight(window.outerHeight);    \n    window.addEventListener('resize', () => {\n      setWindowHeight(window.outerHeight);\n    });\n  }, []);\n\n  const [bdopen, setBdopen] = useState<boolean>(false);\n\n  const closeBackDrop = () => {\n    setBdopen(false);\n    (document.activeElement as HTMLElement)?.blur();\n    document.getElementById('app-main')?.focus();\n  };\n\n  const openBackDrop = () => {\n    setBdopen(true)\n  };\n\n  const downloadJson = async () => {\n    const blob = new Blob([JSON.stringify(words)], {type:'application/json'});\n    const link = document.createElement('a');\n    link.href = await URL.createObjectURL(blob);\n    link.download = 'words.json';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  const uploadJson = () => {\n    inputRef.current?.click()\n  }\n\n  const readFileAsync = (file: File) => {\n    return new Promise<string>((resolve, reject) => {\n      let reader = new FileReader();\n      reader.onload = () => {\n        resolve(reader.result as string);\n      };\n      reader.onerror = reject;\n      reader.readAsText(file);\n    })\n  }\n\n  const onFileInputChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target?.files) {\n      try {\n        const buff = await readFileAsync(event.target?.files[0]);\n        dispatch(setWords(JSON.parse(buff)))\n      } catch(err) {\n        console.log(err)\n      }\n    }\n  }\n\n  return (\n    <div\n      id=\"app-main\"\n      tabIndex={-1}\n      className={classes.app}\n      onKeyDown={openBackDrop}\n      style={{height: windowHeight}}\n    >\n      <Backdrop\n        open={bdopen}\n        onClick={closeBackDrop}\n      >\n        <WordInput isVisible={bdopen} />\n      </Backdrop>\n      <Notification />\n      <WordList />\n      <Stack direction=\"row\" spacing={2} className=\"btns\">\n        <Fab color=\"secondary\" onClick={downloadJson}>\n          <DownloadIcon />\n        </Fab>\n        <Fab color=\"secondary\" onClick={uploadJson}>\n          <UploadIcon />\n          <input\n            hidden\n            ref={inputRef}\n            type=\"file\"\n            onChange={onFileInputChange}/>\n        </Fab>\n        <Fab color=\"primary\" onClick={openBackDrop}>\n          <AddIcon />\n        </Fab>\n      </Stack>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport notificationReducer from '../features/notification/notificationSlice'\nimport wordlistReducer from '../features/wordlist/wordListSlice'\nimport { AnyAction } from 'redux'\nimport { ThunkAction } from 'redux-thunk'\n\nexport const store = configureStore({\n    reducer: {\n        notification: notificationReducer,\n        wordlist: wordlistReducer\n    }\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    RootState,\n    unknown,\n    AnyAction\n>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}