{"version":3,"sources":["WordInput.tsx","WordCard.tsx","App.tsx","api.ts","reportWebVitals.ts","index.tsx"],"names":["WordInput","props","useState","value","setValue","TextField","className","onChange","e","target","onKeyDown","key","setWord","onClick","stopPropagation","variant","label","WordCard","descr","word","description","map","entry","meanings","meaning","partOfSpeech","definitions","ddef","definition","example","Tooltip","title","Card","sx","display","justifyContent","Box","CardContent","Typography","name","cnt","backgroundColor","IconButton","deleteEntry","KEY_LOCAL_STORAGE","WordList","Grid","container","width","padding","spacing","words","item","xs","UsageMessage","withStyles","app","position","top","left","right","bottom","classes","setWords","windowHeight","setWindowHeight","useEffect","saved","localStorage","getItem","JSON","parse","window","outerHeight","addEventListener","open","message","snState","setSnState","bdopen","setBdopen","setItem","stringify","tabIndex","style","height","Backdrop","some","w","fetch","then","r","json","data","status","result","concat","error","Snackbar","anchorOrigin","vertical","horizontal","onClose","Alert","severity","length","filter","Stack","direction","Fab","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38caf019.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\n\ninterface WordInputProps {\n    setWord: (word: string) => void,\n}\n  \nexport const WordInput = (props: WordInputProps) => {\n    const [value, setValue] = useState<string>('');\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setValue(e.target.value);\n    };\n    const onKeyDown = (e: React.KeyboardEvent) => {\n      if(e.key === 'Enter') {\n        props.setWord(value);\n        setValue('');\n      }\n    };\n    const onClick = (e: React.MouseEvent) => {\n        e.stopPropagation();\n    };\n    return (\n      <TextField\n        className=\"word-input\"\n        onChange={handleChange}\n        onKeyDown={onKeyDown}\n        onClick={onClick}\n        value={value}\n        variant=\"outlined\"\n        label=\"enter your word\" />\n    );\n};","import Tooltip from '@mui/material/Tooltip';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport IconButton from '@mui/material/IconButton';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport { DictEntry } from './api';\n\nexport interface Word {\n    name: string,\n    description?: DictEntry[],\n    cnt: number\n}\n\nexport interface WordCardProps {\n    word: Word,\n    deleteEntry: (name: string) => void,\n}\n\nexport const WordCard = (props: WordCardProps) => {\n    const descr = props.word.description?.map(\n      entry => <div>\n        {entry.meanings.map(meaning => <div>\n          {`(${meaning.partOfSpeech})`}<br />\n          {meaning.definitions.map(ddef => <div>\n            {`- ${ddef.definition}`}<br />\n            {`e.g., ${ddef.example}`}\n          </div>)}\n        </div>)}\n      </div>\n    );\n    return (\n      <Tooltip title={ descr || 'NotFound' }>\n        <Card sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n          <Box>\n            <CardContent>\n              <Typography>\n                { `${props.word.name} (${props.word.cnt})` }\n              </Typography>\n            </CardContent>          \n          </Box>\n          <Box sx={{ backgroundColor: '#f8d7d9' }}>\n            <CardContent>\n              <IconButton\n                onClick={() => props.deleteEntry(props.word.name)} >\n                <HighlightOffIcon />\n              </IconButton>\n            </CardContent>\n          </Box>\n        </Card>\n      </Tooltip>\n    );\n  }","import React, {useEffect, useState } from 'react';\nimport Grid from '@mui/material/Grid';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport Backdrop from '@mui/material/Backdrop';\nimport Fab from '@mui/material/Fab';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport UploadIcon from '@mui/icons-material/Upload';\nimport AddIcon from '@mui/icons-material/Add';\nimport withStyles, {WithStylesProps} from 'react-jss';\nimport { searchDict } from './api';\nimport { WordInput } from './WordInput';\nimport { Word, WordCard } from './WordCard';\nimport { Stack, Typography } from '@mui/material';\n\nconst KEY_LOCAL_STORAGE='cards.words';\n\nconst styles = {\n  app: {\n    \"& .btns\": {\n      position: 'fixed',\n      top: 'auto',\n      left: 'auto',\n      right: '20px',\n      bottom: '20px'\n    },\n  },\n};\ninterface SnackBarState {\n  open: boolean,\n  message: string,\n}\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  children?: React.ReactNode\n}\n\ninterface WordListProps {\n  words: Word[],\n  deleteEntry: (name: string) => void,\n};\n\nconst WordList = (props: WordListProps) => {\n  return (\n    <Grid container sx={{width: \"100%\", padding: \"40px\"}} spacing={2}>\n      {props.words.map((word) => {\n        return (\n          <Grid item xs={3}>\n            <WordCard\n              word={word}\n              deleteEntry={props.deleteEntry}\n            />\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n}\n\nconst UsageMessage = () => {\n  return (\n    <Typography>\n      Type any key or click the add button below to add new word.\n    </Typography>\n  );\n}\n\nfunction App(props: IProps) {\n  const { classes } = props;\n  const [words, setWords] = useState<Word[]>([]);\n  const [windowHeight, setWindowHeight] = useState<number>(0);\n\n  const deleteEntry = (name: string) => {\n    setWords(words.filter((w) => name !== w.name));\n  }\n\n  useEffect(() => {\n    const saved = localStorage.getItem(KEY_LOCAL_STORAGE);\n    if(saved) {\n      setWords(JSON.parse(saved))\n    }\n    setWindowHeight(window.outerHeight);    \n    window.addEventListener('resize', () => {\n      setWindowHeight(window.outerHeight);\n    });\n  }, []);\n\n  const [snState, setSnState] = useState<SnackBarState>({\n    open: false,\n    message: '',\n  });\n  const { open, message } = snState;\n  const [bdopen, setBdopen] = useState<boolean>(false);\n\n  const handleClose = () => {\n    setSnState({ ...snState, open: false });\n  }\n\n  useEffect(() => {\n    localStorage.setItem(\n      KEY_LOCAL_STORAGE, JSON.stringify(words));\n  }, [words]);\n\n  const addEntry = (name: string) => {\n    if (words.some(w => w.name === name)) {\n      setWords(words.map(w => (w.name === name)?({ ...w, cnt: w.cnt+1 }):w));\n    } else {\n      searchDict(name)\n      .then((result) => {\n        if (result.status === 200) {\n          setWords(words.concat({\n            name: name,\n            description: result.data,\n            cnt: 0\n          }));\n        } else {\n          setWords(words.concat({name: name, cnt: 0}));\n        }\n      },\n      (error) => {\n        setSnState({open: true, message: 'APIRequestFailed'});\n      });\n    }\n  };\n\n  return (\n    <div\n      tabIndex={-1}\n      className={classes.app}\n      onKeyDown={() => {setBdopen(true)}}\n      style={{height: windowHeight}}\n    >\n      <Backdrop\n        open={bdopen}\n        onClick={() => setBdopen(false)}\n      >\n        <WordInput setWord={addEntry} />\n      </Backdrop>\n      <Snackbar\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n        open={open}\n        onClose={handleClose}>\n          <Alert variant=\"filled\" severity=\"error\">\n            {message}\n          </Alert>\n      </Snackbar>\n      { (words.length === 0)\n        ? <UsageMessage />\n        : <WordList words={words} deleteEntry={deleteEntry}/> }\n      <Stack direction=\"row\" spacing={2} className=\"btns\">\n        <Fab color=\"primary\">\n          <AddIcon />\n        </Fab>\n        <Fab color=\"secondary\">\n          <DownloadIcon />\n        </Fab>\n        <Fab color=\"secondary\">\n          <UploadIcon />\n        </Fab>\n      </Stack>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(App);\n","\nexport interface DictEntry {\n    meanings: DictMeaning[]\n}\n\nexport interface DictMeaning {\n    partOfSpeech: string,\n    definitions: DictDefinition[]\n}\n\nexport interface DictDefinition {\n    definition: string,\n    example: string,\n}\n\nexport const searchDict = (word: string) => \n    fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`)\n    .then(r => r.json().then((data: DictEntry[]) => ({status: r.status, data: data})));","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}