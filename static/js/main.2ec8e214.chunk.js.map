{"version":3,"sources":["features/WordInput.tsx","app/hooks.ts","features/notification/notificationSlice.ts","features/notification/Notification.tsx","features/wordlist/WordCard.tsx","features/wordlist/wordListSlice.ts","common/freedictapi.ts","features/UsageMessage.tsx","features/wordlist/WordList.tsx","App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["WordInput","props","useState","value","setValue","TextField","className","onChange","e","target","onKeyDown","key","setWord","onClick","stopPropagation","variant","label","useAppDispatch","useDispatch","useAppSelector","useSelector","notificationSlice","createSlice","name","initialState","open","message","reducers","showError","_state","action","payload","close","state","actions","selectNotification","notification","Notification","dispatch","Snackbar","anchorOrigin","vertical","horizontal","onClose","autoHideDuration","Alert","severity","WordCard","descr","word","description","map","entry","meanings","meaning","partOfSpeech","definitions","ddef","definition","example","Tooltip","title","Card","sx","display","justifyContent","Box","CardContent","Typography","cnt","backgroundColor","IconButton","deleteEntry","wordListSlice","words","deleteWord","filter","w","insertWord","concat","countUp","setWords","state_","addWord","getState","wordlist","some","fetch","then","r","json","data","status","result","error","selectWordList","UsageMessage","KEY_LOCAL_STORAGE","WordList","useEffect","saved","localStorage","getItem","JSON","parse","setItem","stringify","length","Grid","container","width","padding","spacing","item","xs","withStyles","app","position","top","left","right","bottom","classes","windowHeight","setWindowHeight","window","outerHeight","addEventListener","bdopen","setBdopen","tabIndex","style","height","Backdrop","Stack","direction","Fab","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","notificationReducer","wordlistReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ec8e214.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\n\ninterface WordInputProps {\n    setWord: (word: string) => void,\n}\n  \nexport const WordInput = (props: WordInputProps) => {\n    const [value, setValue] = useState<string>('');\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setValue(e.target.value);\n    };\n    const onKeyDown = (e: React.KeyboardEvent) => {\n      if(e.key === 'Enter') {\n        props.setWord(value);\n        setValue('');\n      }\n    };\n    const onClick = (e: React.MouseEvent) => {\n        e.stopPropagation();\n    };\n    return (\n      <TextField\n        className=\"word-input\"\n        onChange={handleChange}\n        onKeyDown={onKeyDown}\n        onClick={onClick}\n        value={value}\n        variant=\"outlined\"\n        label=\"enter your word\" />\n    );\n};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport type { RootState } from '../../app/store'\n\ninterface NotificationState {\n    open: boolean,\n    message: string,\n}\n\nconst initialState: NotificationState = {\n    open: false,\n    message: ''\n}\n\nexport const notificationSlice = createSlice({\n    name: 'notification',\n    initialState,\n    reducers: {\n        showError: (_state, action: PayloadAction<string>) => (\n            {open: true, message: action.payload}\n        ),\n        close: (state) => (\n            {...state, open:false}\n        )\n    }\n})\n\nexport const { showError, close } = notificationSlice.actions\n\nexport const selectNotification = (state: RootState) => state.notification\n\nexport default notificationSlice.reducer","import Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { close, selectNotification } from './notificationSlice';\n\nexport const Notification = () => {\n    const {open, message} = useAppSelector(selectNotification);\n    const dispatch = useAppDispatch();\n    return (\n        <Snackbar\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n            open={open}\n            onClose={() => dispatch(close)}\n            autoHideDuration={10}\n        >\n          <Alert variant=\"filled\" severity=\"error\">\n            {message}\n          </Alert>\n      </Snackbar>\n    );\n}","import Tooltip from '@mui/material/Tooltip';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport IconButton from '@mui/material/IconButton';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport { Word } from '../../common/word';\n\nexport interface WordCardProps {\n    word: Word,\n    deleteEntry: (name: string) => void,\n}\n\nexport const WordCard = (props: WordCardProps) => {\n    const descr = props.word.description?.map(\n      entry => <div>\n        {entry.meanings.map(meaning => <div>\n          {`(${meaning.partOfSpeech})`}<br />\n          {meaning.definitions.map(ddef => <div>\n            {`- ${ddef.definition}`}<br />\n            {`e.g., ${ddef.example}`}\n          </div>)}\n        </div>)}\n      </div>\n    );\n    return (\n      <Tooltip title={ descr || 'NotFound' }>\n        <Card sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n          <Box>\n            <CardContent>\n              <Typography>\n                { `${props.word.name} (${props.word.cnt})` }\n              </Typography>\n            </CardContent>          \n          </Box>\n          <Box sx={{ backgroundColor: '#f8d7d9' }}>\n            <CardContent>\n              <IconButton\n                onClick={() => props.deleteEntry(props.word.name)} >\n                <HighlightOffIcon />\n              </IconButton>\n            </CardContent>\n          </Box>\n        </Card>\n      </Tooltip>\n    );\n  }","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport type { RootState, AppThunk } from '../../app/store'\nimport { searchDict } from '../../common/freedictapi'\nimport { showError } from '../notification/notificationSlice'\nimport { Word } from '../../common/word'\n\ninterface WordListState {\n    words: Word[],\n}\n\nconst initialState: WordListState = {\n    words: []\n}\n\nexport const wordListSlice = createSlice({\n    name: 'wordlist',\n    initialState,\n    reducers: {\n        deleteWord: ({words}, action: PayloadAction<string>) => (\n            { words: words.filter((w) => action.payload !== w.name) }\n        ),\n        insertWord: ({words}, action: PayloadAction<Word>) => (\n            { words: words.concat(action.payload) }\n        ),\n        countUp: ({words}, action: PayloadAction<string>) => (\n            { words: words.map(w =>\n                (w.name === action.payload)?({ ...w, cnt: w.cnt+1 }):w)}\n        ),\n        setWords: (state_, action:PayloadAction<Word[]>) => (\n            { words: action.payload }\n        )\n    }\n})\n\nexport const { deleteWord, setWords } = wordListSlice.actions\n\nexport const addWord = (name: string): AppThunk =>\n    (dispatch, getState) => {\n        const {words} = getState().wordlist;\n        if(words.some(w => w.name === name)) {\n            dispatch(wordListSlice.actions.countUp(name))\n        } else {\n            searchDict(name)\n            .then((result) => {\n                if (result.status === 200) {\n                    dispatch(wordListSlice.actions.insertWord(\n                        {\n                            name: name,\n                            description: result.data,\n                            cnt: 0\n                        }\n                    ))\n                } else {\n                    dispatch(wordListSlice.actions.insertWord(\n                        {name: name, cnt: 0}\n                    ))\n                }\n            },\n            (error) => {\n                dispatch(showError('APIRequestFailed'))\n            })\n        }\n    }\n\nexport const selectWordList = (state: RootState) => state.wordlist.words\n\nexport default wordListSlice.reducer","\nexport interface DictEntry {\n    meanings: DictMeaning[]\n}\n\nexport interface DictMeaning {\n    partOfSpeech: string,\n    definitions: DictDefinition[]\n}\n\nexport interface DictDefinition {\n    definition: string,\n    example: string,\n}\n\nexport const searchDict = (word: string) => \n    fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`)\n    .then(r => r.json().then((data: DictEntry[]) => ({status: r.status, data: data})));","import Typography from '@mui/material/Typography';\n\nexport const UsageMessage = () => {\n    return (\n      <Typography>\n        Type any key or click the add button below to add new word.\n      </Typography>\n    );\n  }","import Grid from '@mui/material/Grid'\nimport { WordCard } from './WordCard'\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { deleteWord, selectWordList, setWords } from './wordListSlice';\nimport { useEffect } from 'react';\nimport { UsageMessage } from '../UsageMessage';\n\nconst KEY_LOCAL_STORAGE='cards.words';\n\nexport const WordList = () => {\n    const words = useAppSelector(selectWordList);\n    const dispatch = useAppDispatch();\n\n    useEffect(() => {\n      const saved = localStorage.getItem(KEY_LOCAL_STORAGE);\n      if(saved) {\n        dispatch(setWords(JSON.parse(saved)))\n      }\n    }, []);\n\n    useEffect(() => {\n      localStorage.setItem(\n        KEY_LOCAL_STORAGE, JSON.stringify(words));\n    }, [words]);\n\n    if (words.length === 0) {\n      return <UsageMessage />\n    } else {\n      return (\n        <Grid container sx={{width: \"100%\", padding: \"40px\"}} spacing={2}>\n        {words.map((word) => {\n          return (\n            <Grid item xs={3}>\n              <WordCard\n                word={word}\n                deleteEntry={(name: string) => dispatch(deleteWord(name))}\n              />\n            </Grid>\n          );\n        })}\n      </Grid>)\n    }\n}","import React, {useEffect, useState } from 'react'\n\nimport Backdrop from '@mui/material/Backdrop'\nimport Fab from '@mui/material/Fab'\nimport DownloadIcon from '@mui/icons-material/Download'\nimport UploadIcon from '@mui/icons-material/Upload'\nimport AddIcon from '@mui/icons-material/Add'\nimport Stack from '@mui/material/Stack'\nimport withStyles, {WithStylesProps} from 'react-jss'\nimport { WordInput } from './features/WordInput'\nimport { Notification } from './features/notification/Notification'\nimport { useAppDispatch } from './app/hooks'\nimport { WordList } from './features/wordlist/WordList'\nimport { addWord } from './features/wordlist/wordListSlice'\n\nconst styles = {\n  app: {\n    \"& .btns\": {\n      position: 'fixed',\n      top: 'auto',\n      left: 'auto',\n      right: '20px',\n      bottom: '20px'\n    },\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  children?: React.ReactNode\n}\n\nfunction App(props: IProps) {\n  const { classes } = props;\n  const dispatch = useAppDispatch();\n  const [windowHeight, setWindowHeight] = useState<number>(0);\n\n  useEffect(() => {\n    setWindowHeight(window.outerHeight);    \n    window.addEventListener('resize', () => {\n      setWindowHeight(window.outerHeight);\n    });\n  }, []);\n\n  const [bdopen, setBdopen] = useState<boolean>(false);\n\n  return (\n    <div\n      tabIndex={-1}\n      className={classes.app}\n      onKeyDown={() => {setBdopen(true)}}\n      style={{height: windowHeight}}\n    >\n      <Backdrop\n        open={bdopen}\n        onClick={() => setBdopen(false)}\n      >\n        <WordInput setWord={(word: string) => dispatch(addWord(word))} />\n      </Backdrop>\n      <Notification />\n      <WordList />\n      <Stack direction=\"row\" spacing={2} className=\"btns\">\n        <Fab color=\"primary\">\n          <AddIcon />\n        </Fab>\n        <Fab color=\"secondary\">\n          <DownloadIcon />\n        </Fab>\n        <Fab color=\"secondary\">\n          <UploadIcon />\n        </Fab>\n      </Stack>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport notificationReducer from '../features/notification/notificationSlice'\nimport wordlistReducer from '../features/wordlist/wordListSlice'\nimport { AnyAction } from 'redux'\nimport { ThunkAction } from 'redux-thunk'\n\nexport const store = configureStore({\n    reducer: {\n        notification: notificationReducer,\n        wordlist: wordlistReducer\n    }\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    RootState,\n    unknown,\n    AnyAction\n>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}